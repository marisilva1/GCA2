 # get number of images under consideration
    num_images = X.shape[1]
  
    # derivative of cost function wrt w (scalar)
    dw = (1./num_images)*np.dot(X,((A-Y).T))
  
    # To find the derivatives of the cost functions we will first look at the sigmoid function and divise that to dz/dphi = phi(phi-1) and then considerr z = x.w and divise this to get dphi/dWi = (dz/dphi)(dw/dz) = phi(phi-1)Xi    # To get our new dw we will use the equation: Wnew = Wold - n(dphi/dWi). The Wold being the old dw and the n being the number of images that are being run through. This will allow us to take smaller sections of the gradient descent of the curve and decrese the error.  
    # derivative of cost function wrt b (scalar)
    db = (1./num_images)*np.sum(A-Y,axis=1)
  
    # To find the derivative of the cost function db, it is very similar to that of dw. Though, the z changes for it is a sum of x and w and not a dot product. Thus, z = x + w and the db/dz = 2.    # #Though the dz/dphi will stay the same as that from dw. Thus dphi/dbi = (dz/dphi)(db/dz) = phi(phi-1)2. Then to get the final db we will get Bnew = Bold - n(dphi/dbi).  
    # create dictionary of derivatives (gradients)
